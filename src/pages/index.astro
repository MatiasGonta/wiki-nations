---
import Filters from "../components/Filters.astro";
import Header from "../components/Header.astro";
import Layout from "../layouts/Layout.astro";
import { fetchCountries } from "../services";
import Card from "../components/Card.astro";
import type { RawCountry } from "../types";

// Get countries
const { data: rawCountries } = await fetchCountries();

// Alphabetical sort
let filteredCountries: RawCountry[] = rawCountries.sort((countryA: RawCountry, countryB: RawCountry) => {
        const nameA = countryA.name.common.toUpperCase();
        const nameB = countryB.name.common.toUpperCase();

        if (nameA < nameB) {
            return -1;
        }
        if (nameA > nameB) {
            return 1;
        }
        return 0;
    }
);

// Get query params
const searchQuery = Astro.url.searchParams.get("q");
const regionQuery = Astro.url.searchParams.get("region");
const sortQuery = Astro.url.searchParams.get("sort");

// Handle filters
if (regionQuery && (regionQuery === "Africa" || regionQuery === "Europe" || regionQuery === "Americas" || regionQuery === "Asia" || regionQuery === "Oceania" || regionQuery === "Antarctic")) {
	filteredCountries = filteredCountries.filter(
		(country) => country.region.toLowerCase() === regionQuery.toLowerCase(),
	);
}

if (searchQuery && searchQuery.trim() !== "" && searchQuery.trim().length > 0) {
	filteredCountries = filteredCountries.filter((country) =>
		country.name.common.toLowerCase().includes(searchQuery.toLowerCase()),
	);
}

if (sortQuery && (sortQuery === "asc" || sortQuery === "desc")) {
	if (sortQuery === "asc") {
		filteredCountries = filteredCountries.filter(
			(country) => country.population > 0,
		);
		filteredCountries.sort(
			(countryA, countryB) => countryA.population - countryB.population,
		);
	} else {
		filteredCountries = filteredCountries.filter(
			(country) => country.population > 0,
		);	
		filteredCountries.sort(
			(countryA, countryB) => countryB.population - countryA.population,
		);
	}
}
---

<Layout title="Wiki Nations">
	<Header>
		<Filters>
	</Header>
	<main class="w-full flex justify-center items-center">
		<section>
			<article>
				{
					filteredCountries && filteredCountries.length > 0
						? (
							<ul class="grid gap-8 grid-cols-1 grid-rows-auto text-white w-fit h-full p-8 md:grid-cols-2 lg:grid-cols-3 min-[1300px]:grid-cols-4">
								{
									filteredCountries.map((country) => (
										<Card
											country={{
												name: country.name.common,
												flag: country.flags.svg,
												region: country.region,
												subregion: country.subregion,
												capital: country.capital,
												population: country.population,
											}}
										/>
									))
								}
							</ul>
						) : (
							<div>No countries found</div>
						)
				}
			</article>
		</section>
	</main>
</Layout>